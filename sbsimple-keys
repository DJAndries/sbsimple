#!/bin/sh

prompt_new_passphrase() {
	printf "Enter secure passphrase to encrypt new keys: "
	stty -echo
	read PASS
	printf "\nConfirm passphrase: "
	read CPASS
	stty echo
	echo
	[ -n "$PASS" ] && [ "$PASS" = "$CPASS" ] || prompt_new_passphrase
}

KEY_NAMES='PK KEK db'

keys_generate() {

	[ ! -d "/etc/efi-keys" ] || \
		(confirm "EFI keys already exist. Do you wish to regenerate them?" && \
		rm -rf /etc/efi-keys) || return 0

	mkdir /etc/efi-keys
	chmod 600 /etc/efi-keys
	cd /etc/efi-keys
	prompt_new_passphrase

	report_stage "Generating keys"

	for i in $KEY_NAMES; do
		report_start "Generating secure boot $i key"
		ce "openssl req -new -x509 -newkey rsa:4096 -subj \"/CN=sbsimple $i/\" -keyout $i.key \
-out $i.crt -days 3650 -sha256 -passout stdin <<EOF
$PASS
EOF"
		report_start "Creating DER certificate for $i key"
		ce "openssl x509 -in $i.crt -out $i.cer -outform DER"
		report_success
	done
}

keys_efilists() {
	prompt_existing_passphrase

	report_stage "Creating and signing EFI signature lists"

	ce "cat /proc/sys/kernel/random/uuid"
	GUID="$CMDOUT"
	SIGNING_PAIR="PK"
	for i in $KEY_NAMES; do
		report_start "Creating EFI sig list for $i certificate"
		ce "cert-to-efi-sig-list -g $GUID $i.crt $i.esl"
		report_start "Temporarily decrypting $i key"
		ce "openssl rsa -in $i.key -passin stdin -out /tmp/$i.key <<EOF
$PASS
EOF"
		report_start "Signing EFI sig list for $i certificate"
		ce "sign-efi-sig-list -t \"$(date --date='1 second' +'%Y-%m-%d %H:%M:%S')\" \
-k /tmp/$SIGNING_PAIR.key -c $SIGNING_PAIR.crt $i $i.esl $i.auth"
		report_success
		SIGNING_PAIR="$i"
	done
	clean_tmp_keys
}

keys_enroll() {
	report_stage "Enrolling EFI keys in system store"

	rm -rf /etc/secureboot/keys
	mkdir -p /etc/secureboot/keys
	chmod 600 /etc/secureboot/keys
	for i in $KEY_NAMES; do
		report_start "Copying $i auth file to SB directory"
		ce "mkdir /etc/secureboot/keys/$i && chmod 600 /etc/secureboot/keys/$i"
		ce "cp /etc/efi-keys/$i.auth /etc/secureboot/keys/$i/$i.auth"
		report_success
	done
	report_start "Enrolling KEK and db keys in UEFI system keystore"
	ce "sbkeysync --verbose"
	report_start "Enrolling PK key in UEFI system keystore"
	ce "sbkeysync --verbose --pk"
	report_success
}

keys_remove() {
	report_start "Removing EFI keys"
	rm -rf /etc/efi-keys 2>/dev/null
	rm -rf /etc/secureboot 2>/dev/null
	report_success
}

KEYS_USAGE_MSG="$BANNER

USAGE: $(basename $0) keys <subcommand> [-v]

SUBCOMMANDS:
	generate - Generate keys and certificates for secure boot
	efi-lists - Generate & sign EFI signature lists to prepare for installation
	enroll - Enroll keys in UEFI system keystore; setup mode needs to be enabled
	setup - Perform all of the above 
	remove - Remove all EFI keys
"

handle_keys() {
	case "$1" in
		generate) keys_generate;;
		efi-lists) keys_efilists;;
		enroll) keys_enroll;;
		setup) keys_generate && keys_efilists && keys_enroll;;
		remove) keys_remove;;
		*) >&2 echo "$KEYS_USAGE_MSG"
	esac	
}
