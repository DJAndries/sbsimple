#!/bin/sh

LSBLK_OUT=$(lsblk -rio UUID,MOUNTPOINT,PATH)
DRIVE_UUID=$(echo "$LSBLK_OUT" | grep /boot | cut -d' ' -f1)
DRIVE_PATH=$(echo "$LSBLK_OUT" | grep /boot | cut -d' ' -f3)
ROOT_UUID=$(echo "$LSBLK_OUT" | grep " / " | cut -d' ' -f1)

. /etc/default/grub

SECBOOT_ENTRY_CONTENTS="#!/bin/sh
exec tail -n +3 \\\$0

menuentry 'Linux (Secure Boot)' --unrestricted {
	insmod fat
	insmod chain
	search --no-floppy --fs-uuid --set=root $DRIVE_UUID 
	chainloader /EFI/Linux/linux.efi root=UUID=$ROOT_UUID rw $GRUB_CMDLINE_LINUX_DEFAULT
}

menuentry 'Linux Fallback (Secure Boot)' --unrestricted {
	insmod fat
	insmod chain
	search --no-floppy --fs-uuid --set=root $DRIVE_UUID
	chainloader /EFI/Linux/linux-fallback.efi root=UUID=$ROOT_UUID rw $GRUB_CMDLINE_LINUX_DEFAULT
}
"

grub_gen_pwd_config() {
	echo "#!/bin/sh
exec tail -n +3 \\\$0

set superusers=\\\"root\\\"
password_pbkdf2 root $1"
}

grub_prompt_new_password() {
	printf "Enter secure password to protect GRUB: "
	stty -echo
	read GRUBPASS
	printf "\nConfirm password: "
	read CGRUBPASS
	stty echo
	echo
	[ -n "$GRUBPASS" ] && [ "$GRUBPASS" = "$CGRUBPASS" ] || grub_prompt_new_password
}

grub_entry() {
	report_stage "Adding Linux secure boot entries in GRUB"
	report_start "Adding Linux secure boot entries to /etc/grub.d"
	ce "echo \"$SECBOOT_ENTRY_CONTENTS\" > /etc/grub.d/09_secboot"
	chmod 755 /etc/grub.d/09_secboot
	report_start "Making GRUB config"
	ce "grub-mkconfig -o /boot/grub/grub.cfg"
	report_success
}

grub_password() {
	grub_prompt_new_password
	report_stage "Adding password protection to GRUB"
	report_start "Hashing password"
	PASSHASH_INPUT=$(printf "$GRUBPASS\n$GRUBPASS\n")
	ce "grub-mkpasswd-pbkdf2 <<EOF
$PASSHASH_INPUT
EOF"
	PASSHASH=$(echo "$CMDOUT" | grep PBKDF2 | cut -d' ' -f7)
	report_start "Adding password protection config to /etc/grub.d"
	ce "echo \"$(grub_gen_pwd_config "$PASSHASH")\" > /etc/grub.d/50_pwd"
	chmod 755 /etc/grub.d/50_pwd
	report_start "Making GRUB config"
	ce "grub-mkconfig -o /boot/grub/grub.cfg"
	report_success
}

efi_remove_grub_entry() {
	ce "efibootmgr | grep GRUB | head -n 1 | cut -d'*' -f1 | cut -c5-"
	[ -n "$CMDOUT" ] && ce "efibootmgr -B -b $CMDOUT"
}

grub_install() {
	report_stage "Making standalone GRUB image"
	report_start "Making image"
	mkdir -p /boot/EFI/GRUB 2>/dev/null
	chmod 755 /boot/EFI/GRUB
	ce "grub-mkstandalone -d /usr/lib/grub/x86_64-efi/ -O x86_64-efi \
--modules=\"part_gpt part_msdos tpm\" -o /boot/EFI/GRUB/grubx64.efi --disable-shim-lock \
/boot/grub/grub.cfg=/boot/grub/grub.cfg"
	report_start "Adding boot entry in GRUB"
	efi_remove_grub_entry
	ce "efibootmgr --create --disk /dev/sda --part 1 --loader /EFI/GRUB/grubx64.efi \
-o 0000 --label \"GRUB\" --verbose"
	report_success
}

grub_sign() {
	report_stage "Signing standalone GRUB image"

	prompt_existing_passphrase
	cd /etc/efi-keys
	report_start "Temporarily decrypting db key"
	ce "openssl rsa -in db.key -passin stdin -out /tmp/db.key <<EOF
$PASS
EOF"
	report_start "Signing image"
	ce "sbsign --key /tmp/db.key --cert db.crt --output /boot/EFI/GRUB/grubx64.efi \
/boot/EFI/GRUB/grubx64.efi"
	report_success
	clean_tmp_keys
}

grub_remove() {
	report_start "Restoring GRUB configuration"
	rm /etc/grub.d/50_pwd 2>/dev/null
	rm /etc/grub.d/09_secboot 2>/dev/null
	ce "grub-mkconfig -o /boot/grub/grub.cfg"
	report_start "Removing standalone GRUB"
	rm /boot/EFI/GRUB/grubx64.efi 2>/dev/null
	efi_remove_grub_entry
	report_success
}

GRUB_USAGE_MSG="$BANNER

USAGE: $(basename $0) grub <subcommand> [-v]

SUBCOMMANDS:
	unified-entry - Add unified kernel boot entry if not existing
	password-protect - Add password protection to GRUB if not existing
	install - Make & install standalone GRUB
	sign - Sign standalone GRUB with secure boot keys
	setup - Perform all of the above 
	remove - Remove configuration modifications, standalone GRUB image and EFI boot entry
"

handle_grub() {
	case "$1" in
		unified-entry) grub_entry;;
		password-protect) grub_password;;
		install) grub_install;;
		sign) grub_sign;;
		setup) grub_entry && grub_password && grub_install && grub_sign;;
		remove) grub_remove;;
		*) >&2 echo "$GRUB_USAGE_MSG"
	esac	
}
